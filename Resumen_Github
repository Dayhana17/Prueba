Github:
Herramienta para almacenar versiones de código fuentes, en la que se pueda volver a versiones anteriores o trabajar en versiones paralelas.
1. Instalación:
	en terminal: sudo apt-get install git
	Para vincular la cuenta de github:
		git config --global user.name "usuario"
		git config --global user.email "cuenta de correo electrónico"
2. Crear un nuevo repositorio
	1. Crear una carpeta en la ruta deseada del computador
	2.git init Carpeta (Crea un repositorio vacío terminado en .git [archivos que empiezan con punto son ocultos])

Una vez se crea o se modifica algún archivo dentro del repositorio, se observa el estado en el que están utilizando “git status”, de manera que se conozca si las modificaciones han sido agregadas al repositorio.

4. Agregar archivo a repositorio
	git add Archivo
	git add . (agrega todos los archivos)

5. Crear un commit
	git commit
	Para observar un histórico de los commits realizados: git log
	Con el subcomando git dif se puede observar cuales partes del documento se han modificado 
	Para crear modificaciones sin hacer un nuevo commit o para modificar un commit
		git commit --amend

6. Checkout
	Para deshacer cambios que se hayan realizado en alguno de los archivos cuando aún no se ha 		realizado el commit: 
		git checkout -- Archivo, esto descarta (odificcaciones locales)
	git reset HEAD Archivo, para resetear un archivo

7. Eliminar un commit
	Cuando se desea realizar una modificación a un archivo al que ya se le ha realizado un 		commit. Si interesa dejar el repositorio a como estaba en cierto commit
	Para ver el nombre de los commits y el mensaje: git log --oneline
	git reset Codigo_del_commit, elimina el commit
	git seset  --hard Codigo_del_commit, elimina el commit tanto de forma local como del stage.
	git reset soft Codigo_del_commit, realiza las modificaciones y las deja en el stage.

8. Revert: Para revertir un commit. Las líneas que se quitan se agregan y viceversa. Es menos destructivo que reset
	git revert Codigo_del_commit

Otra opcion para no tener que poner el codigo del commit es conocer a que apunta el puntero HEAD, para esto se puede ver como
	git log --oneline --decorate	
si pongo HEAD~1, puedo ver el commit anterior, HEAD~2 … etc.
Para crear un revert de varios commits revirtiendo los cambios pero sin hacer un commit
cuando se finalice de realizar los reverts se  cierra con
		git revert continue


9. Ramas: Permite realizar varias cosas a la vez, donde cada rama es independiente entre sí. Para crear una nueva rama:
	git branch 
si ponemos este comando nos dice cuantas ramas hay… cuando no se tiene ninguna rama nos dirá *master (rama principal) y en verde (actualmente visualizando)

Para ingresar o cambiar a ramas distintas de la master se utiliza 
	git checkout Rama
Para regresar a la rama master
	git checkout master
Para crear una rama y cambiarme a ella
	git checkout -b Rama
Para cambiar nombre a una rama se usa el parámetro -m 
	git branch -m Nombre_antiguo Nombre_nuevo
Eliminar rama
	git branch -d Rama
Para visualizar las demás opciones de branch
	git branch -h

10. Commits en distintas ramas. Se abren los archivos y se realiza el commit normal, para ver el estado del repositorio:
	git log --oneline --decorate

11. Merge.  cuando  se tiene código en alguna rama y se requiere que estos cambios regresen a master, para que sea código estable y pueda ser utilizado, esto es realizando una fusión de los commits que había en master y de los commits que había en la rama.

Se necesita estar en la rama destino y desde ahi digitar el siguiente comando, con el nombre de la rama destino:
	git merge Rama
Tutoral12 Modificación
Para terminar de fusionar y que no aparezca al hacer log (master,Rama) se realiza un nuevo  merge para crear un nuevo commit que incorpore todos los cambios

Conflicto Merge
	Para crear cambios en el mismo archivo algunas veces se crean conflictos entre ramas


 
